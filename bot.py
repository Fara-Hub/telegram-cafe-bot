from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from datetime import datetime
import pytz

# –í–°–¢–ê–í–¨ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∏ chat_id
TOKEN = "7794922900:AAHDKyZxn1PN6gMujKML1CD4DLBPljM2H_k"
ADMIN_CHAT_ID =  5702266078

LANG_SELECT, CATEGORY, ITEM = range(3)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞—Ñ–µ
def is_cafe_open():
    now = datetime.now(MOSCOW_TZ)
    current_hour = now.hour
    return 11 <= current_hour < 24

# –°—Ç–æ–ø-–ª–∏—Å—Ç (—Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π)
stop_list = []

MESSAGES = {
    "start": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ñ–µ –°–ê–ú–û–ù–ò!",
    "choose_category": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
    "choose_dish": "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:",
    "item_added": "‚úÖ *{}* –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.",
    "cart_empty": "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
    "thank_you": "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ‚ù§Ô∏è",
    "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    "cart": "üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
    "order_done": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
}

CATEGORY_ICONS = {
    "üç≤ –°—É–ø—ã": "üç≤",
    "ü•ü –í—ã–ø–µ—á–∫–∞ –∏ –∑–∞–∫—É—Å–∫–∏": "ü•ü",
    "üî• –ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞": "üî•",
    "üç¢ –®–∞—à–ª—ã–∫": "üç¢",
    "ü•ó –°–∞–ª–∞—Ç—ã": "ü•ó",
    "ü•£ –°–æ—É—Å—ã": "ü•£",
    "ü•§ –ù–∞–ø–∏—Ç–∫–∏": "ü•§"
}

MENU = {
    "üç≤ –°—É–ø—ã": {
        "–®—É—Ä–ø–∞ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π": 290,
        "–§–∞—Ç–∏—Ä —à—É—Ä–ø–∞": 350,
        "–õ–∞–≥–º–∞–Ω": 300,
        "–ú–∞—Å—Ç–∞–≤–∞": 260,
        "–ß—É—á–≤–∞—Ä–∞": 300,
        "–ú–∞–Ω—Ç—ã —à—É—Ä–ø–∞": 310
    },
    "ü•ü –í—ã–ø–µ—á–∫–∞ –∏ –∑–∞–∫—É—Å–∫–∏": {
        "–°–∞–º—Å–∞ (–∫—É—Ä–∏—Ü–∞)": 100,
        "–°–∞–º—Å–∞ (–≥–æ–≤—è–¥–∏–Ω–∞)": 110,
        "–°–∞–º—Å–∞ (–±–∞—Ä–∞–Ω–∏–Ω–∞)": 120,
        "–õ–µ–ø–µ—à–∫–∞": 30,
        "–§–∞–≥–∏—Ä": 60,
        "–ß–∞–∫-—á–∞–∫": 130,
        "–ù–∞–≥–≥–µ—Ç—Å—ã (6—à—Ç)": 180,
        "–§—Ä–∏": 150
    },
    "üî• –ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞": {
        "–°–ê–î–ñ (–∫—É—Ä–∏—Ü–∞)": 950,
        "–°–ê–î–ñ (–≥–æ–≤—è–¥–∏–Ω–∞)": 1000,
        "–°–ê–î–ñ (–±–∞—Ä–∞–Ω–∏–Ω–∞)": 1250,
        "–ú–∞–Ω—Ç—ã": 300,
        "–ü–ª–æ–≤": 300,
        "–î—É–ª–º–∞": 300,
        "–ñ–∞—Ä–∫–æ–µ (–≥–æ–≤—è–¥–∏–Ω–∞)": 440,
        "–ñ–∞—Ä–∫–æ–µ (–∫—É—Ä–∏—Ü–∞)": 400,
        "–õ–∞–≥–º–∞–Ω –∂–∞—Ä–µ–Ω—ã–π": 420,
        "–•–∏–Ω–∫–∞–ª–∏ (1—à—Ç)": 80,
        "–û–≤–æ—â–Ω–∞—è –≥—Ä–∏–ª—å": 250,
        "–ö—É—Ä—É—Ç–æ–± (–∫—É—Ä–∏—Ü–∞)": 380,
        "–ö—É—Ä—É—Ç–æ–± (–≥–æ–≤—è–¥–∏–Ω–∞)": 400,
        "–ú—è—Å–æ —Å –≥—Ä–∏–±–∞–º–∏": 480,
        "–ö—Ä—ã–ª—å—è —Ö—Ä—É—Å—Ç—è—â–∏–µ (6—à—Ç)": 280,
        "–ê–¥–∂–∞–ø—Å–∞–Ω–¥–∞–ª —Å –≥–æ–≤—è–¥–∏–Ω–æ–π": 430
    },
    "üç¢ –®–∞—à–ª—ã–∫": {
        "–õ—é–ª—è-–∫–µ–±–∞–± (–≥–æ–≤—è–¥–∏–Ω–∞)": 390,
        "–õ—é–ª—è-–∫–µ–±–∞–± (–±–∞—Ä–∞–Ω–∏–Ω–∞)": 410,
        "–ë–∞—Ä–∞–Ω–∏–Ω–∞ –∫–æ—Ä–µ–π–∫–∞": 540,
        "–ë–∞—Ä–∞–Ω–∏–Ω–∞ –º—è–∫–æ—Ç—å": 480,
        "–ö—É—Ä–∏—Ü–∞": 380,
        "–°—ë–º–≥–∞": 750,
        "–î–æ—Ä–æ–¥–æ": 720,
        "–§–æ—Ä–µ–ª—å": 580,
        "–®–∞—à–ª—ã–∫ –∞—Å—Å–æ—Ä—Ç–∏": 2350,
        "–ö—É—Ä–∏–Ω—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏": 320,
        "–•–∞–Ω –∫–µ–±–∞–±": 380,
        "–ë–∞—Ä–∞–Ω–Ω–∏–π –º–∏–∫—Å": 570
    },
    "ü•ó –°–∞–ª–∞—Ç—ã": {
        "–ë—Ä—ã–Ω–∑–∞ –Ω–∞—Ä–µ–∑–∫–∞": 250,
        "–ê—á—É-—á—É—á–∏–∫": 150,
        "–°–æ–ª—ë–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞": 200,
        "–û–≤–æ—â–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞": 200,
        "–¶–µ–∑–∞—Ä—å": 280,
        "–û–ª–∏–≤—å–µ": 240,
        "–°–æ–º–æ–Ω–∏": 310,
        "–ú—è—Å–Ω–æ–π": 320,
        "–ë—É–∫–µ—Ç –∑–µ–ª–µ–Ω—å": 230,
        "–ì—Ä–µ—á–µ—Å–∫–∏–π": 260,
        "–ú–∞–Ω–≥–∞–ª —Å–∞–ª–∞—Ç": 300
    },
    "ü•£ –°–æ—É—Å—ã": {
        "–ö—Ä–∞—Å–Ω—ã–π": 35,
        "–ß–µ—Å–Ω–æ—á–Ω—ã–π": 35,
        "–ß–∞–∫–∞": 40,
        "–ü–µ—Ä–µ—Ü —Ö–∞–ª–∞–ø–µ–Ω—å–æ": 35
    },
    "ü•§ –ù–∞–ø–∏—Ç–∫–∏": {
        "–î–æ–±—Ä—ã–π –ö–æ–ª–∞ (0,5 –ª)": 100,
        "–î–æ–±—Ä—ã–π –ö–æ–ª–∞ (1 –ª)": 140,
        "–ö–æ–∫–∞-–ö–æ–ª–∞ (1 –ª)": 140,
        "RC Cola (1 –ª)": 200,
        "Burn": 150,
        "–ê–¥—Ä–µ–Ω–∞–ª–∏–Ω": 150,
        "Monster": 90,
        "Drive": 100,
        "Lipton": 100,
        "–ú–æ—Ö–∏—Ç–æ –ê—á–∞–ª—É–∫–∏": 100,
        "–û–±—ã—á–Ω–∞—è –≤–æ–¥–∞ (0,5 –ª)": 45,
        "–û–±—ã—á–Ω–∞—è –≤–æ–¥–∞ (1,25 –ª)": 80,
        "–û–±—ã—á–Ω–∞—è –≤–æ–¥–∞ (2 –ª)": 140
    },
"üåØ –®–∞—É—Ä–º–∞": {
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç (–∫—É—Ä–∏—Ü–∞)": 250,
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç (–≥–æ–≤—è–¥–∏–Ω–∞)": 290,
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç (–±–∞—Ä–∞–Ω–∏–Ω–∞)": 300,
        "–ë–æ–ª—å—à–∞—è (–∫—É—Ä–∏—Ü–∞)": 270,
        "–ë–æ–ª—å—à–∞—è (–≥–æ–≤—è–¥–∏–Ω–∞)": 320,
        "–ë–æ–ª—å—à–∞—è (–±–∞—Ä–∞–Ω–∏–Ω–∞)": 350,
        "–¶–µ–∑–∞—Ä—å (–∫—É—Ä–∏—Ü–∞)": 260,
        "–¶–µ–∑–∞—Ä—å (–≥–æ–≤—è–¥–∏–Ω–∞)": 300,
        "–¶–µ–∑–∞—Ä—å (–±–∞—Ä–∞–Ω–∏–Ω–∞)": 340,
        "–ß–∏–∑–±—É—Ä–≥–µ—Ä–Ω–∞—è (–∫—É—Ä–∏—Ü–∞)": 310,
        "–ß–∏–∑–±—É—Ä–≥–µ—Ä–Ω–∞—è (–≥–æ–≤—è–¥–∏–Ω–∞)": 340,
        "–ß–∏–∑–±—É—Ä–≥–µ—Ä–Ω–∞—è (–±–∞—Ä–∞–Ω–∏–Ω–∞)": 380,
        "–û—Å—Ç—Ä–∞—è": 285,
        "–®–∞—É—Ä–º –î–æ–≥": 220,
        "–° –Ω–∞–≥–≥–µ—Ç—Å–∞–º–∏": 250,
        "–ú—è—Å–Ω–∞—è": 400,
        "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è": 200,
        "–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏ (–∫—É—Ä–∏—Ü–∞)": 265,
        "–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏ (–ª—é–ª—è)": 310,
        "–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏ (–≥–æ–≤—è–¥–∏–Ω–∞)": 340,
        "–ì–∏—Ä–æ—Å (–∫—É—Ä–∏—Ü–∞)": 270,
        "–ì–∏—Ä–æ—Å (–ª—é–ª—è)": 320,
        "–ì–∏—Ä–æ—Å (–≥–æ–≤—è–¥–∏–Ω–∞)": 350,
        "–¢–µ—Ä–∏—è–∫–∏ (–∫—É—Ä–∏—Ü–∞)": 290,
        "–¢–µ—Ä–∏—è–∫–∏ (–ª—é–ª—è)": 320,
        "–¢–µ—Ä–∏—è–∫–∏ (–≥–æ–≤—è–¥–∏–Ω–∞)": 370
    },
    "üçî –§–∞—Å—Ç—Ñ—É–¥": {
        "–•–æ—Ç-–¥–æ–≥ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π": 179,
        "–•–æ—Ç-–¥–æ–≥ –¥–≤–æ–π–Ω–æ–π": 179,
        "–ö–∞—Ä—Ç–æ—à–∫–∞ –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏": 180,
        "–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏": 150,
        "–ö—Ä—ã–ª—å—è (4—à—Ç)": 199,
        "–ö—Ä—ã–ª—å—è (8—à—Ç)": 360,
        "–ù–∞–≥–≥–µ—Ç—Å—ã (6—à—Ç)": 180,
        "–§—Ä–∏ –±–æ–π—Å": 280,
        "–î–≤–æ–π–Ω–æ–µ –º—è—Å–æ": 140,
        "–ì—Ä–∏–±—ã —à–∞–º–ø–∏–Ω—å–æ–Ω—ã": 75,
        "–ü–µ—Ä–µ—Ü —Ö–∞–ª–∞–ø–µ–Ω—å–æ": 35
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_cafe_open():
        await update.message.reply_text("–ö–∞—Ñ–µ –∑–∞–∫—Ä—ã—Ç–æ. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 11:00 –¥–æ 00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.")
        return ConversationHandler.END
    context.user_data["cart"] = {}
    keyboard = [[KeyboardButton(cat)] for cat in MENU.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        MESSAGES["start"],
        reply_markup=reply_markup
    )
    return CATEGORY

async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_cafe_open():
        await update.message.reply_text("–ö–∞—Ñ–µ –∑–∞–∫—Ä—ã—Ç–æ. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 11:00 –¥–æ 00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.")
        return ConversationHandler.END
    keyboard = [[KeyboardButton(cat)] for cat in MENU.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        MESSAGES["choose_category"],
        reply_markup=reply_markup
    )
    return CATEGORY

async def show_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_cafe_open():
        await update.message.reply_text("–ö–∞—Ñ–µ –∑–∞–∫—Ä—ã—Ç–æ. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 11:00 –¥–æ 00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.")
        return ConversationHandler.END
    category = update.message.text

    if category not in MENU:
        await update.message.reply_text(MESSAGES["choose_category"])
        return CATEGORY

    context.user_data["category"] = category

    icon = CATEGORY_ICONS.get(category, "")
    available_items = {k: v for k, v in MENU[category].items() if k not in stop_list}
    if not available_items:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ.")
        return CATEGORY

    text = f"{icon} *{category}*\n\n"
    for dish, price in available_items.items():
        text += f"‚Ä¢ {dish} ‚Äî {price} ‚ÇΩ\n"

    buttons = [[KeyboardButton(dish)] for dish in available_items.keys()]
    buttons.append([KeyboardButton(MESSAGES["back"])])
    buttons.append([KeyboardButton(MESSAGES["order_done"])])
    buttons.append([KeyboardButton(MESSAGES["cart"])])

    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text(
        text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    return ITEM

async def choose_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_cafe_open():
        await update.message.reply_text("–ö–∞—Ñ–µ –∑–∞–∫—Ä—ã—Ç–æ. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 11:00 –¥–æ 00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.")
        return ConversationHandler.END
    text = update.message.text

    if text == MESSAGES["back"]:
        return await show_categories(update, context)

    if text == MESSAGES["order_done"]:
        return await finish_order(update, context)

    if text == MESSAGES["cart"]:
        return await show_cart(update, context)

    category = context.user_data.get("category")
    if category and text in MENU[category] and text not in stop_list:
        price = MENU[category][text]
        await add_to_cart(update, context, text, price)
        return ITEM
    else:
        await update.message.reply_text(MESSAGES["choose_dish"])
        return ITEM

async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE, item_name: str, price: int):
    cart = context.user_data.setdefault('cart', {})
    if item_name in cart:
        cart[item_name]['quantity'] += 1
    else:
        cart[item_name] = {'quantity': 1, 'price': price}
    await update.message.reply_text(MESSAGES["item_added"].format(item_name), parse_mode="Markdown")

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_cafe_open():
        await update.message.reply_text("–ö–∞—Ñ–µ –∑–∞–∫—Ä—ã—Ç–æ. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 11:00 –¥–æ 00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.")
        return ConversationHandler.END
    cart = context.user_data.get('cart', {})

    if not cart:
        await update.message.reply_text(MESSAGES["cart_empty"])
        return ITEM

    items_text = []
    total = 0
    for item, data in cart.items():
        item_total = data['quantity'] * data['price']
        items_text.append(f"‚ñ™ {item} √ó {data['quantity']} = {item_total}‚ÇΩ")
        total += item_total

    response = (
        "üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n\n" +
        "\n".join(items_text) +
        f"\n\nüíµ *–ò—Ç–æ–≥–æ:* {total}‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "/add_more - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã\n"
        "/clear_cart - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
        "/checkout - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    )

    await update.message.reply_text(response, parse_mode="Markdown")
    return ITEM

async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["cart"] = {}
    await update.message.reply_text("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    return await show_categories(update, context)

async def finish_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_cafe_open():
        await update.message.reply_text("–ö–∞—Ñ–µ –∑–∞–∫—Ä—ã—Ç–æ. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 11:00 –¥–æ 00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.")
        return ConversationHandler.END
    cart = context.user_data.get('cart', {})

    if not cart:
        await update.message.reply_text(MESSAGES["cart_empty"])
        return ConversationHandler.END

    text = ""
    total = 0
    for item, data in cart.items():
        subtotal = data['quantity'] * data['price']
        text += f"‚Ä¢ {item} √ó {data['quantity']} = {subtotal} ‚ÇΩ\n"
        total += subtotal

    order_summary = f"üßæ *–í–∞—à –∑–∞–∫–∞–∑:*\n{text}\n*–ò—Ç–æ–≥–æ:* {total} ‚ÇΩ"
    await update.message.reply_text(order_summary, parse_mode="Markdown")

    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{text}\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ",
        parse_mode="Markdown"
    )

    context.user_data["cart"] = {}
    await update.message.reply_text(MESSAGES["thank_you"])
    return ConversationHandler.END

async def handle_cart_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    command = update.message.text.lower()
    if command == '/add_more':
        return await show_categories(update, context)
    elif command == '/clear_cart':
        return await clear_cart(update, context)
    elif command == '/checkout':
        return await finish_order(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_items)],
            ITEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_item)]
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CommandHandler("cart", show_cart),
            CommandHandler("add_more", show_categories),
            CommandHandler("clear_cart", clear_cart),
            CommandHandler("checkout", finish_order),
        ]
    )

    app.add_handler(conv)
    app.add_handler(MessageHandler(filters.COMMAND, handle_cart_actions))
    app.run_polling()

if __name__ == "__main__":
    main()

# üëá –≠–¢–û –í–ù–ò–ó–£ bot.py, –¥–ª—è "–æ–±–º–∞–Ω–∞" Railway
try:
    from flask import Flask
    app = Flask(__name__)

    @app.route('/')
    def home():
        return "Bot is running!"

except:
    pass

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
